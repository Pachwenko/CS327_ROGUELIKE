==15678== Memcheck, a memory error detector
==15678== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==15678== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==15678== Command: ./rlg327
==15678== Parent PID: 14954
==15678== 
==15678== Invalid write of size 8
==15678==    at 0x111E57: init_PC_items(dungeon*) (dungeon.cpp:619)
==15678==    by 0x111F34: gen_dungeon(dungeon*) (dungeon.cpp:639)
==15678==    by 0x10C5B4: main (rlg327.cpp:218)
==15678==  Address 0xe28 is not stack'd, malloc'd or (recently) free'd
==15678== 
==15678== 
==15678== Process terminating with default action of signal 11 (SIGSEGV)
==15678==  Access not within mapped region at address 0xE28
==15678==    at 0x111E57: init_PC_items(dungeon*) (dungeon.cpp:619)
==15678==    by 0x111F34: gen_dungeon(dungeon*) (dungeon.cpp:639)
==15678==    by 0x10C5B4: main (rlg327.cpp:218)
==15678==  If you believe this happened as a result of a stack
==15678==  overflow in your program's main thread (unlikely but
==15678==  possible), you can try to increase the size of the
==15678==  main thread stack using the --main-stacksize= flag.
==15678==  The main thread stack size used in this run was 8388608.
==15678== 
==15678== HEAP SUMMARY:
==15678==     in use at exit: 363,220 bytes in 450 blocks
==15678==   total heap usage: 83,354 allocs, 82,904 frees, 2,153,509 bytes allocated
==15678== 
==15678== LEAK SUMMARY:
==15678==    definitely lost: 0 bytes in 0 blocks
==15678==    indirectly lost: 0 bytes in 0 blocks
==15678==      possibly lost: 0 bytes in 0 blocks
==15678==    still reachable: 363,220 bytes in 450 blocks
==15678==         suppressed: 0 bytes in 0 blocks
==15678== Rerun with --leak-check=full to see details of leaked memory
==15678== 
==15678== For counts of detected and suppressed errors, rerun with: -v
==15678== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
