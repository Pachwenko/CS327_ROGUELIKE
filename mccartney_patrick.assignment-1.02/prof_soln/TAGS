
heap.c,1020
struct heap_node 8,99
  heap_node_t *next;next9,118
  heap_node_t *prev;prev10,139
  heap_node_t *parent;parent11,160
  heap_node_t *child;child12,183
  void *datum;datum13,205
  uint32_t degree;14,220
  uint32_t mark;15,239
#define swap(18,260
#define splice_heap_node_lists(24,372
#define insert_heap_node_in_list(33,684
#define remove_heap_node_from_list(40,908
void print_heap_node(45,1041
void print_heap(61,1363
void print_heap_node_list(78,1665
void heap_init(94,1864
void heap_node_delete(104,2100
void heap_delete(122,2403
heap_node_t *heap_insert(heap_insert133,2568
void *heap_peek_min(heap_peek_min153,2894
static void heap_link(158,2970
static void heap_consolidate(172,3292
void *heap_remove_min(heap_remove_min213,4225
int heap_combine(248,4759
static void heap_cut(277,5410
static void heap_cascading_cut(291,5691
int heap_decrease_key(305,5917
int heap_decrease_key_no_replace(319,6159
int32_t compare(343,6733
char *print_int(print_int348,6832
int main(357,6950

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

rlg327.c,2349
#define rand_under(16,339
#define rand_range(20,481
#define UNUSED(21,553
#define malloc(23,582
typedef struct stair31,768
  char value;33,791
  uint8_t xpos;34,805
  uint8_t ypos;35,821
} stair_t;36,837
typedef struct corridor_path38,849
  heap_node_t *hn;hn40,880
  uint8_t pos[pos41,899
  uint8_t from[from42,917
  int32_t cost;43,936
} corridor_path_t;44,952
typedef enum dim46,972
  dim_x,48,991
  dim_y,49,1000
  num_dims50,1009
} dim_t;51,1020
typedef int16_t pair_t[pair_t53,1030
#define DUNGEON_X 55,1065
#define DUNGEON_Y 56,1086
#define MIN_ROOMS 57,1107
#define MAX_ROOMS 58,1127
#define ROOM_MIN_X 59,1148
#define ROOM_MIN_Y 60,1169
#define ROOM_MAX_X 61,1190
#define ROOM_MAX_Y 62,1212
#define mappair(64,1235
#define mapxy(65,1292
#define hardnesspair(66,1327
#define hardnessxy(67,1394
typedef enum __attribute__((__packed__)) terrain_type69,1440
  ter_debug,71,1496
  ter_wall,72,1509
  ter_wall_immutable,73,1521
  ter_floor,74,1543
  ter_floor_room,75,1556
  ter_floor_hall,76,1574
  ter_stairs,77,1592
  ter_stairs_up,78,1606
  ter_stairs_down79,1623
} terrain_type_t;80,1641
typedef struct room82,1660
  pair_t position;84,1682
  pair_t size;85,1701
} room_t;86,1716
typedef struct dungeon88,1727
  uint32_t num_rooms;90,1752
  room_t rooms[rooms91,1774
  terrain_type_t map[map92,1801
  uint8_t hardness[hardness101,2454
} dungeon_t;102,2496
static uint32_t in_room(104,2510
static uint32_t adjacent_to_room(122,2907
static uint32_t is_open_space(130,3168
static int32_t corridor_path_cmp(135,3267
static void dijkstra_corridor(140,3415
static void dijkstra_corridor_inv(261,7332
#define hardnesspair_inv(328,8714
static int connect_two_rooms(384,11438
static int create_cycle(403,12090
static int connect_rooms(448,13665
int gaussian[gaussian462,13860
typedef struct queue_node469,13999
  int x,471,14027
  int x, y;471,14027
  struct queue_node *next;next472,14039
} queue_node_t;473,14066
static int smooth_hardness(475,14083
static int empty_dungeon(652,18354
static int place_rooms(674,18742
static void place_stairs(718,19946
static int make_rooms(742,20547
int gen_dungeon(769,21104
void render_dungeon(783,21268
void delete_dungeon(822,22045
void init_dungeon(826,22084
int save(831,22141
int load(990,26811
int main(1080,29126
